/////////////////////////////////////////////////////////////////////////////
//
//              R O T A T I O N   S E A R C H
//
// This package contains the source code which implements the
// BnB rotation search algorithm and the nested 6 DoF registration
// algorithm proposed in
//
// A. Parra Bustos, T.-J. Chin, A. Eriksson, H. Li and D. Suter
// Fast Rotation Search with Stereographic Projections for 3D Registration
// IEEE Transactions on Pattern Analysis and Machine Intelligence (TPAMI)
//
// Copyright (c) 2016 Alvaro PARRA BUSTOS (aparra@cs.adelaide.edu.au.)
// School of Computer Science, The University of Adelaide, Australia
// The Australian Center for Visual Technologies
// http://cs.adelaide.edu.au/~aparra
// Please acknowledge the authors by citing the above paper in any academic
// publications that have made use of this package or part of it.
//
/////////////////////////////////////////////////////////////////////////////


#ifndef REG_MCIRC_INDEXATION_
#define REG_MCIRC_INDEXATION_

#include "reg_common.h"
#include "data_indexation.h"
#include "state.h"
#include "reg_rtree.h"

namespace reg {
namespace search {

template<class SSR>
class MCircIndexation : public DataIndexation<SSR>
{
public:
    MCircIndexation( const Matrix3X &X, const Matrix3X &Y, double th );
    ~MCircIndexation();

    int sweep();
    int sweep(int *matchList, int matchListSize, std::vector<bool> &matches);

    int size() const;

    int evalUpperBound(SSR ssr, int lwbnd) const;
    int evalUpperBound(SSR ssr, int lwbnd,
                       int *matchList, int matchListSize,
                       std::vector<bool> &matches) const;

    int evalLowerBound(SSR ssr) const;
    int evalLowerBound(SSR ssr, int *matchList, int matchListSize) const;
    int evalLowerBound(SSR ssr, int *matchList, int matchListSize,
                       std::vector<bool> &matches) const;

private:
    const Matrix3X &M_in;
    const Matrix3X &B_in;
    const double th;

    Matrix3X M;

    RTree **tree_array;

    int _size;
};

//template<class SSR>
//class MCircIndexation_normal : public DataIndexation<SSR>
//{
//public:
//    MCircIndexation_normal( const Matrix3X &X, const Matrix3X &Y,
//                            const Matrix3X &NX, const Matrix3X &NY,
//                            double th_in, double angTh_in);
//    ~MCircIndexation_normal();

//    int sweep();
//    int sweep(int *matchList, int matchListSize, std::vector<bool> &matches);

//    int size() const;

//    int evalUpperBound(SSR ssr, int lwbnd) const;
//    int evalUpperBound(SSR ssr, int lwbnd,
//                       int *matchList, int matchListSize,
//                       std::vector<bool> &matches) const;

//    int evalLowerBound(SSR ssr) const;
//    int evalLowerBound(SSR ssr, int *matchList, int matchListSize) const;
//    int evalLowerBound(SSR ssr, int *matchList, int matchListSize,
//                       std::vector<bool> &matches) const;

//private:
//    const Matrix3X &M_in;
//    const Matrix3X &B_in;
//    const Matrix3X &NM_in;
//    const Matrix3X &NB_in;
//    const double th;
//    const double angTh;

//    Matrix3X M;

//    NRTree **tree_array;

//    int _size;
//};

} // End namespace sarch
} // End namespace reg

#include "mcirc_indexation.hpp"


#endif
